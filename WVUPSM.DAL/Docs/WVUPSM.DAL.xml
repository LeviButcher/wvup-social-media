<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WVUPSM.DAL</name>
    </assembly>
    <members>
        <member name="T:WVUPSM.DAL.EF.SMContext">
            <summary>
                WVUP Social Media connection setup object
            </summary>
        </member>
        <member name="P:WVUPSM.DAL.EF.SMContext.UserAccounts">
            <summary>
                Table of <see cref="T:WVUPSM.Models.Entities.User"/> in Database
            </summary>
        </member>
        <member name="P:WVUPSM.DAL.EF.SMContext.Follows">
            <summary>
                Table of <see cref="T:WVUPSM.Models.Entities.Follow"/>in Database
            </summary>
        </member>
        <member name="P:WVUPSM.DAL.EF.SMContext.Posts">
            <summary>
                Table of <see cref="T:WVUPSM.Models.Entities.Post"/> in Database
            </summary>
        </member>
        <member name="M:WVUPSM.DAL.EF.SMContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
                Overloaded constructer for providing Database construction options.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:WVUPSM.DAL.EF.SMContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Called upon setup of Database, make sure Database is good to go
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:WVUPSM.DAL.EF.SMContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                Hook method open creation of database, setup custom sql properties here
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:WVUPSM.DAL.Initiliazers.DbInitializer">
            <summary>
                Static Database Initiliazer with behaviors for clearing and seeding the database
            </summary>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.DbInitializer.InitializeData(System.IServiceProvider)">
            <summary>
                Clears and Seeds database 
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.DbInitializer.InitializeData(WVUPSM.DAL.EF.SMContext)">
            <summary>
                Clears and seeds the database
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.DbInitializer.ClearData(WVUPSM.DAL.EF.SMContext)">
            <summary>
                Clears the database of all records and resets incremental keys 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.DbInitializer.SeedData(WVUPSM.DAL.EF.SMContext)">
            <summary>
                Seeds the database with constant records if the database doesn't already have records
            </summary>
            <param name="context">Database connection</param>
        </member>
        <member name="T:WVUPSM.DAL.Initiliazers.SampleData">
            <summary>
                Sample Data for WVUPSM
            </summary>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.SampleData.GetUsers">
            <summary>
                Gets all users with their own posts
            </summary>
            <returns>Collection of Users</returns>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.SampleData.CreateNewUser(System.String,System.String)">
            <summary>
                Creates a new user, provide a userName and email will be userName@Develop.com or provided a email as well
            </summary>
            <param name="userName">doesn't need to be unique</param>
            <param name="email">has to be unique string with EX: @{Develop}.{com}</param>
            <returns>A new User object with necessary properties for Database set</returns>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.SampleData.PostGenerator(System.Int32)">
            <summary>
                Generates a post with the amount of words passed in
            </summary>
            <remarks>
                Posts words are randomly selected from a list of predefined words
            </remarks>
            <param name="words">amount of words post should have</param>
            <returns>A new post with the amount of words provided</returns>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.SampleData.GetFollowing(System.Collections.Generic.List{WVUPSM.Models.Entities.User})">
            <summary>
                Gets a Collection of Follow records for the users provided
            </summary>
            <remarks>
                users are randomly selected to follow other users,
                each user will be following at least 5 people to the max of the count of users provided
            </remarks>
            <param name="users">users</param>
            <returns>Follow collection that has been randomly selected</returns>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.SampleData.CreateFollow(WVUPSM.Models.Entities.User,WVUPSM.Models.Entities.User)">
            <summary>
                Creates a new user record
            </summary>
            <param name="user">User who will follow someone</param>
            <param name="goingToBeFollowed">The person who will be followed</param>
            <returns>Returns a new Follow object</returns>
        </member>
        <member name="M:WVUPSM.DAL.Initiliazers.SampleData.SetPasswords(System.Collections.Generic.List{WVUPSM.Models.Entities.User})">
            <summary>
                Sets a list of users password to Develop@90
            </summary>
            <param name="users">users</param>
            <returns>Return the users with their password hash set</returns>
        </member>
        <member name="T:WVUPSM.DAL.Repos.Interfaces.IFollowRepo">
            <summary>
                Follow Repository Database API
            </summary>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IFollowRepo.GetFollowers(System.String,System.Int32,System.Int32)">
            <summary>
                Gets the user's followers which are people following that user.
            </summary>
            <param name="userId">The id of this user</param>
            <param name="skip">Amount of records to skip</param>
            <param name="take">Amount of records to take</param>
            <returns>UserProfiles less then or equal to take</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IFollowRepo.GetFollowing(System.String,System.Int32,System.Int32)">
            <summary>
                Gets the people that the user is following.
            </summary>
            <param name="userId">The id of this user</param>
            <param name="skip">Amount of records to skip</param>
            <param name="take">Amount of records to take</param>
            <returns>UserProfiles less then or equal to take</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IFollowRepo.CreateFollower(WVUPSM.Models.Entities.Follow)">
            <summary>
                Creates a new Follow record
            </summary>
            <param name="follow">Follow object that MUST contain a userId and followId</param>
            <returns>integer value of number of records affected</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IFollowRepo.DeleteFollower(WVUPSM.Models.Entities.Follow)">
            <summary>
                Deletes a follow record
            </summary>
            <param name="follow">Follow object that MUST contain a userId and followId</param>
            <returns>value of number of records affected</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IFollowRepo.GetFollowingCount(System.String)">
            <summary>
                Gets a User's following count which is the number of people this user is following
            </summary>
            <param name="userId">User's id</param>
            <returns>number of people user is following</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IFollowRepo.GetFollowerCount(System.String)">
            <summary>
                Gets a User's follower count which is the number of people following this user
            </summary>
            <param name="userId">User's id</param>
            <returns>number of people following this user</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IFollowRepo.IsFollowingAsync(System.String,System.String)">
            <summary>
                Determines if a user is following someone or not
            </summary>
            <param name="userId">User's Id</param>
            <param name="followId">Follow Id</param>
            <returns>True if the user is following the other person, false otherwise</returns>
        </member>
        <member name="T:WVUPSM.DAL.Repos.Interfaces.IPostRepo">
            <summary>
                Post Respository Database API
            </summary>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IPostRepo.GetPost(System.Int32)">
            <summary>
                Gets a UserPost matching the id
            </summary>
            <param name="id">post's id</param>
            <returns>Returns UserPost viewmodel matching that id</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IPostRepo.GetBasePost(System.Int32)">
            <summary>
                Gets a base post matching the id
            </summary>
            <param name="id">post's id</param>
            <returns>Returns post matching that id</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IPostRepo.GetFollowingPosts(System.String,System.Int32,System.Int32)">
            <summary>
                Gets post's from the people that this user is following
            </summary>
            <param name="userId">User's id</param>
            <param name="skip">Amount of records to skip</param>
            <param name="take">Amount of record to take</param>
            <returns>amount of UserPost less then or equal to take</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IPostRepo.DeletePost(WVUPSM.Models.Entities.Post)">
            <summary>
                Deletes the post provided from the Database
            </summary>
            <param name="post">Post that must have a id and timestamp</param>
            <returns>number of records effected</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IPostRepo.CreatePost(WVUPSM.Models.Entities.Post)">
            <summary>
                Creates a new post in the database
            </summary>
            <param name="post">A new post without a id</param>
            <returns>number of records created</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IPostRepo.GetUsersPost(System.String,System.Int32,System.Int32)">
            <summary>
                Gets the user's post matching the userId provided
            </summary>
            <param name="userId">user's id</param>
            <param name="skip">Records to skip</param>
            <param name="take">Recrods to take</param>
            <returns>Amount of UserPost less then or equal to take</returns>
        </member>
        <member name="T:WVUPSM.DAL.Repos.Interfaces.IUserRepo">
            <summary>
                User Respository Database API
            </summary>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IUserRepo.GetAllUsers">
            <summary>
                Get all users 
            </summary>
            <returns>All users</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IUserRepo.GetUsers(System.Int32,System.Int32)">
            <summary>
                Get users
            </summary>
            <param name="skip">amount of records to skip</param>
            <param name="take">amount of records to take</param>
            <returns>UserProfiles less than or equal to take</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IUserRepo.FindUsers(System.String)">
            <summary>
                Finds a user matching any word or subcharacter within email and userName
            </summary>
            <param name="term">letter[s] to search for</param>
            <returns>0 or more UserProfile matching the term</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IUserRepo.GetBase(System.String)">
            <summary>
                Gets a User with the id provided
            </summary>
            <param name="id">user's Id</param>
            <returns>User with matching id or null</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IUserRepo.GetUser(System.String)">
            <summary>
                Gets a userProfile with the id provided
            </summary>
            <param name="id">user's id</param>
            <returns>UserProfile with matching id or null</returns>
        </member>
        <member name="M:WVUPSM.DAL.Repos.Interfaces.IUserRepo.UpdateUserAsync(WVUPSM.Models.Entities.User)">
            <summary>
                Updates a user if the user exists in the database
            </summary>
            <param name="user">User with a Id</param>
            <returns>Amount of records effected</returns>
        </member>
    </members>
</doc>
