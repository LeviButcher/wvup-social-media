/*
 * Loads a User Following Posts on scroll
 */

const postContainer = document.querySelector(".post-container");
const baseTake = 10;
let skip = baseTake;
let take = baseTake;

$(window).scroll(() => {
    //Stack Overflow - https://stackoverflow.com/questions/14035180/jquery-load-more-data-on-scroll
    //console.groupCollapse("scroll");
    //console.log("window-scroll: " + $(window).scrollTop());
    //console.log("window-height: " + $(window).height());
    //console.log("document-height: " + $(document).height());
    //console.groupEnd("scroll");
    if ($(window).scrollTop() + $(window).height() >= $(document).height()) {
        //console.log("triggered");
        
        if (postContainer !== null) {
            let userId = postContainer.dataset.userid;
            let action = postContainer.dataset.action;
            //AddPostData(userId, action);
        }
    }
});


function AddPostData(userId, action) {
    GetPostData(userId, action, skip, take)
        .then(data => {
            data.map(datum => {
                let postArticle = document.createElement('article');
                postArticle.classList.add('post');
                let postHeader = document.createElement('header');
                postHeader.classList.add('post-header');
                let postContent = document.createElement('div');
                postContent.classList.add('post-content');
                postHeader.innerHTML = `<h3><a href="/User/Index/${datum.userId}"> ${datum.userName} </a></h3>
                                            <h4><a href="/Post/Index/${datum.postId}"> ${datum.timeSinceCreation} </a></h4>
                                        `.trim();
                postContent.innerHTML = `<p>
                                 ${datum.text}
                               </p>`.trim();


                postArticle.appendChild(postHeader);
                postArticle.appendChild(postContent);
                postContainer.appendChild(postArticle);
            });
        }).then(() => {
            skip += baseTake;
            take += baseTake;
            console.log({ skip, take });
        });
}

async function GetPostData(userId, action, skip, take) {
    return $.ajax({
        url: `${baseUrl}/${action}/${userId}?skip=${skip}&take=${take}`,
        method: "GET"
    }).done((data) => data);
}


//TODO: Make Scroll loader responsible for skip take
/*
 * element => element to add new content to
 * render => function that can take in json and output HTML elements
 * apiCall => string of the api to call for data
 * scrollTop => bool: true if we should load content based on top scrolled
 * */
function scrollLoader(element, render, apiURL, skipStart, take, scrollTop,) {
    console.dir(element);
    let skip = skipStart;
    element.addEventListener('scroll', (event) => {
        let ele = event.target;
        if (ele.scrollHeight - ele.scrollTop === ele.clientHeight) {

            CallApi(apiURL, skip, take)
                .then(data => {
                    return data.map(datum => {
                        return render(datum);
                    });
                })
                .then(generatedHTMLArr => {
                    generatedHTMLArr.forEach(html => {
                        element.appendChild(htmlToElement(html));
                    });
                })
                .then(() => skip = skip + take);
        }
    });
}



async function CallApi(apiURL, skip, take) {
    return $.ajax({
        url: `${baseUrl}/${apiURL}/?skip=${skip}&take=${take}`,
        method: "GET"
    }).done((data) => data);
}
var baseUrl = document.querySelector('base').href;

/*
    UserList FollowToggle functions
*/
var Users = document.querySelectorAll("a[data-userId]");
var spinners = document.querySelectorAll('.spinner');

Users.forEach(user => {
    setFollowingText(user);
});

Users.forEach(user => user.addEventListener('click', toggleFollow));

function toggleFollow() {
    let set = this.dataset;
    let follow = { ...set };
    console.log(follow);
    this.parentElement.classList.add('spinner');
    this.textContent = '';
    this.classList.remove('btn');
    this.classList.remove('btn-primary');

    $.ajax({
        url: `${baseUrl}User/ToggleFollow/${follow.userid}/${follow.followid}`,
        method: "POST"
    }).done(() => {
        console.log('ToggleFollow successful');
        setFollowingText(this);
        console.dir(this);
    });
}

function setFollowingText(element) {
    console.dir(element);
    let set = element.dataset;
    let follow = { ...set };
    element.classList.remove('btn');
    element.classList.remove('btn-primary');

    isFollowing(follow.userid, follow.followid)
        .then(result => {
            console.log("Within async isFollowing " + result);
            let text = result ? "Following" : "Follow";
            toggleSpinner(element.parentElement);
            element.textContent = text;
            element.classList.add('btn');
            element.classList.add('btn-primary');
        });
}

async function isFollowing(userId, followId) {
    return $.ajax({
        url: `${baseUrl}User/IsFollowing/${userId}/${followId}`,
        method: "GET",
        success: function (data) {
            console.log("success");
            console.log(data);
            return data;
        },
        error: (data) => {
            console.log("error");
            console.log(data);
        }
    });
}

function toggleSpinner(spinner) {
    spinner.classList.toggle('spinner');
}

/*
    Drawer Button Functionality
*/

const button = document.querySelector("#drawer-button");
const mainContent = document.querySelector("main");
const drawer = document.querySelector("#drawer");
const footer = document.querySelector(".site-footer");

button.addEventListener('click', toggleDrawer);

function toggleDrawer() {
    drawer.classList.toggle("primary-nav-drawer-active");
    mainContent.classList.toggle("active-drawer");
    footer.classList.toggle('site-footer-active');
}


/*
 * Clear Annoucements 
 * 
*/ 
function clearAnnouncements() {
    let announcementSection = document.querySelector('.section-announcement');
    console.dir(announcementSection);
    announcementSection.parentNode.removeChild(announcementSection);
}

/*
 * 
 * Converts string to html node
 * Credit to Mark Amery: https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro
*/
function htmlToElement(html) {
    var template = document.createElement('template');
    html = html.trim(); // Never return a text node of whitespace as the result
    template.innerHTML = html;
    return template.content.firstChild;
}